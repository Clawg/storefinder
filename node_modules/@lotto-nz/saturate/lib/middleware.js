'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _lodash = require('lodash.isplainobject');

var _lodash2 = _interopRequireDefault(_lodash);

var _CALL_API = require('./CALL_API');

var _CALL_API2 = _interopRequireDefault(_CALL_API);

var _validation = require('./validation');

var _errors = require('./errors');

var _util = require('./util');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A Redux middleware that processes RSAA actions.
 *
 * @type {ReduxMiddleware}
 * @access public
 */
function apiMiddleware(_ref) {
  var _this = this;

  var getState = _ref.getState;

  return function (next) {
    return function _callee2(action) {
      var validationErrors, _callAPI, _requestType, callAPI, endpoint, headers, timeout, method, body, credentials, bailout, types, _normalizeTypeDescrip, _normalizeTypeDescrip2, requestType, successType, failureType, t, res, config;

      return _regenerator2.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if ((0, _validation.isRSAA)(action)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt('return', next(action));

            case 2:

              // Try to dispatch an error request FSA for invalid RSAAs
              validationErrors = (0, _validation.validateRSAA)(action);

              if (!validationErrors.length) {
                _context2.next = 7;
                break;
              }

              _callAPI = action[_CALL_API2.default];

              if (_callAPI.types && Array.isArray(_callAPI.types)) {
                _requestType = _callAPI.types[0];

                if (_requestType && _requestType.type) {
                  _requestType = _requestType.type;
                }
                next({
                  type: _requestType,
                  payload: new _errors.InvalidActionError(validationErrors),
                  error: true
                });
              }
              return _context2.abrupt('return');

            case 7:

              // Parse the validated RSAA action
              callAPI = action[_CALL_API2.default];
              endpoint = callAPI.endpoint;
              headers = callAPI.headers;
              timeout = callAPI.timeout;
              method = callAPI.method;
              body = callAPI.body;
              credentials = callAPI.credentials;
              bailout = callAPI.bailout;
              types = callAPI.types;
              _normalizeTypeDescrip = (0, _util.normalizeTypeDescriptors)(types);
              _normalizeTypeDescrip2 = (0, _slicedToArray3.default)(_normalizeTypeDescrip, 3);
              requestType = _normalizeTypeDescrip2[0];
              successType = _normalizeTypeDescrip2[1];
              failureType = _normalizeTypeDescrip2[2];

              // Should we bail out?

              _context2.prev = 21;

              if (!(typeof bailout === 'boolean' && bailout)) {
                _context2.next = 26;
                break;
              }

              return _context2.abrupt('return');

            case 26:
              _context2.t0 = typeof bailout === 'function';

              if (!_context2.t0) {
                _context2.next = 32;
                break;
              }

              _context2.next = 30;
              return _regenerator2.default.awrap(bailout(getState()));

            case 30:
              _context2.t1 = _context2.sent;
              _context2.t0 = _context2.t1 === true;

            case 32:
              if (!_context2.t0) {
                _context2.next = 34;
                break;
              }

              return _context2.abrupt('return');

            case 34:
              _context2.next = 44;
              break;

            case 36:
              _context2.prev = 36;
              _context2.t2 = _context2['catch'](21);

              if (!(typeof bailout === 'function' && bailout(getState()))) {
                _context2.next = 40;
                break;
              }

              return _context2.abrupt('return');

            case 40:
              _context2.next = 42;
              return _regenerator2.default.awrap((0, _util.actionWith)(requestType, [action, getState(), new _errors.RequestError('[CALL_API].bailout function failed')]));

            case 42:
              _context2.t3 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t3));

            case 44:
              if (!(typeof endpoint === 'function')) {
                _context2.next = 55;
                break;
              }

              _context2.prev = 45;

              endpoint = endpoint(getState());
              _context2.next = 55;
              break;

            case 49:
              _context2.prev = 49;
              _context2.t4 = _context2['catch'](45);
              _context2.next = 53;
              return _regenerator2.default.awrap((0, _util.actionWith)(failureType, [action, getState(), new _errors.RequestError('[CALL_API].endpoint function failed')]));

            case 53:
              _context2.t5 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t5));

            case 55:
              if (!(typeof headers === 'function')) {
                _context2.next = 66;
                break;
              }

              _context2.prev = 56;

              headers = headers(getState());
              _context2.next = 66;
              break;

            case 60:
              _context2.prev = 60;
              _context2.t6 = _context2['catch'](56);
              _context2.next = 64;
              return _regenerator2.default.awrap((0, _util.actionWith)(failureType, [action, getState(), new _errors.RequestError('[CALL_API].headers function failed')]));

            case 64:
              _context2.t7 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t7));

            case 66:
              _context2.next = 68;
              return _regenerator2.default.awrap((0, _util.actionWith)(requestType, [action, getState()]));

            case 68:
              _context2.t8 = _context2.sent;
              next(_context2.t8);
              _context2.prev = 70;


              if (typeof window === 'undefined' && process.env.NODE_ENV === 'production' && endpoint.indexOf('http') === -1) {
                endpoint = endpoint.replace('//', 'http://');
              }

              // Make the API callAPI
              config = {
                url: endpoint,
                method: method,
                data: body,
                withCredentials: credentials,
                headers: headers || {},
                timeout: timeout || 0
              };


              if (timeout) {
                t = setTimeout(function _callee() {
                  return _regenerator2.default.async(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          failureType.meta = action;
                          _context.next = 3;
                          return _regenerator2.default.awrap((0, _util.actionWith)(failureType, [action, getState(), new _errors.TimeoutError('Request exceeded timeout of ' + timeout + ' msec')]));

                        case 3:
                          _context.t0 = _context.sent;
                          return _context.abrupt('return', next(_context.t0));

                        case 5:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, null, _this);
                }, timeout);
              }

              _context2.next = 76;
              return _regenerator2.default.awrap((0, _axios2.default)(config));

            case 76:
              res = _context2.sent;
              _context2.next = 99;
              break;

            case 79:
              _context2.prev = 79;
              _context2.t9 = _context2['catch'](70);

              if (!(_context2.t9.hasOwnProperty('status') && _context2.t9.status === 451)) {
                _context2.next = 88;
                break;
              }

              _context2.next = 84;
              return _regenerator2.default.awrap((0, _util.actionWith)({ type: 'TERMS_CONDITIONS_ACTIVATE_MODAL', meta: action }, [action, getState(), res]));

            case 84:
              _context2.t10 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t10));

            case 88:
              if (!(_context2.t9.hasOwnProperty('data') && _context2.t9.data.hasOwnProperty('message') && _context2.t9.data.message.toString().indexOf('InvalidSessionException') > -1)) {
                _context2.next = 95;
                break;
              }

              _context2.next = 91;
              return _regenerator2.default.awrap((0, _util.actionWith)({ type: 'ACTIVATE_INVALID_SESSION_MODAL', meta: action }, [action, getState(), res]));

            case 91:
              _context2.t11 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t11));

            case 95:
              _context2.next = 97;
              return _regenerator2.default.awrap((0, _util.actionWith)({
                type: failureType.type || failureType,
                meta: action,
                payload: failureType.payload || _context2.t9
              }, [action, getState(), _context2.t9]));

            case 97:
              _context2.t12 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t12));

            case 99:

              // Process the server response
              if (t) {
                clearTimeout(t);
              }

              if (!(res.status === 200)) {
                _context2.next = 107;
                break;
              }

              _context2.next = 103;
              return _regenerator2.default.awrap((0, _util.actionWith)(successType, [action, getState(), res]));

            case 103:
              _context2.t13 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t13));

            case 107:
              _context2.next = 109;
              return _regenerator2.default.awrap((0, _util.actionWith)({ type: failureType.type || failureType, meta: action }, [action, getState(), res]));

            case 109:
              _context2.t14 = _context2.sent;
              return _context2.abrupt('return', next(_context2.t14));

            case 111:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, _this, [[21, 36], [45, 49], [56, 60], [70, 79]]);
    };
  };
}

exports.version = '0.1.0';
exports.default = apiMiddleware;