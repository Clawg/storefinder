'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.actionWith = exports.normalizeTypeDescriptors = exports.getJSON = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extract JSON body from a server response
 *
 * @function getJSON
 * @access public
 * @param {object} res - A raw response object
 * @returns {promise|undefined}
 */
function getJSON(res) {
  var contentType;
  return _regenerator2.default.async(function getJSON$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(res instanceof Error)) {
            _context.next = 2;
            break;
          }

          return _context.abrupt('return', res);

        case 2:
          contentType = res.headers['content-type'];

          if (!(contentType && ~contentType.indexOf('json'))) {
            _context.next = 9;
            break;
          }

          _context.next = 6;
          return _regenerator2.default.awrap(res.data);

        case 6:
          return _context.abrupt('return', _context.sent);

        case 9:
          _context.next = 11;
          return _regenerator2.default.awrap(_promise2.default.resolve());

        case 11:
          return _context.abrupt('return', _context.sent);

        case 12:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

/**
 * Blow up string or symbol types into full-fledged type descriptors,
 *   and add defaults
 *
 * @function normalizeTypeDescriptors
 * @access private
 * @param {array} types - The [CALL_API].types from a validated RSAA
 * @returns {array}
 */
function normalizeTypeDescriptors(types) {
  var _types = (0, _slicedToArray3.default)(types, 3);

  var requestType = _types[0];
  var successType = _types[1];
  var failureType = _types[2];


  if (typeof requestType === 'string' || (typeof requestType === 'undefined' ? 'undefined' : (0, _typeof3.default)(requestType)) === 'symbol') {
    requestType = { type: requestType };
  }

  if (typeof successType === 'string' || (typeof successType === 'undefined' ? 'undefined' : (0, _typeof3.default)(successType)) === 'symbol') {
    successType = { type: successType };
  }
  successType = (0, _extends3.default)({
    payload: function payload(action, state, res) {
      return getJSON(res);
    }
  }, successType);

  if (typeof failureType === 'string' || (typeof failureType === 'undefined' ? 'undefined' : (0, _typeof3.default)(failureType)) === 'symbol') {
    failureType = { type: failureType };
  }
  failureType = (0, _extends3.default)({
    payload: function payload(action, state, res) {
      return getJSON(res);
    }
  }, failureType);

  return [requestType, successType, failureType];
}

/**
 * Evaluate a type descriptor to an FSA
 *
 * @function actionWith
 * @access private
 * @param {object} descriptor - A type descriptor
 * @param {array} args - The array of arguments for `payload` and `meta` function properties
 * @returns {object}
 */
function actionWith(descriptor, args) {
  return _regenerator2.default.async(function actionWith$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return _regenerator2.default.awrap(typeof descriptor.payload === 'function' ? descriptor.payload.apply(descriptor, (0, _toConsumableArray3.default)(args)) : descriptor.payload);

        case 3:
          descriptor.payload = _context2.sent;
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2['catch'](0);

          descriptor.payload = new _errors.InternalError(_context2.t0.message);
          descriptor.error = true;

        case 10:
          _context2.prev = 10;
          _context2.next = 13;
          return _regenerator2.default.awrap(typeof descriptor.meta === 'function' ? descriptor.meta.apply(descriptor, (0, _toConsumableArray3.default)(args)) : descriptor.meta);

        case 13:
          descriptor.meta = _context2.sent;
          _context2.next = 21;
          break;

        case 16:
          _context2.prev = 16;
          _context2.t1 = _context2['catch'](10);

          delete descriptor.meta;
          descriptor.payload = new _errors.InternalError(_context2.t1.message);
          descriptor.error = true;

        case 21:
          return _context2.abrupt('return', descriptor);

        case 22:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this, [[0, 6], [10, 16]]);
}

exports.getJSON = getJSON;
exports.normalizeTypeDescriptors = normalizeTypeDescriptors;
exports.actionWith = actionWith;